import telebot
from telebot import types
import time
import random
from enum import Enum

TOKEN: str = "6042304934:AAFxt1sXWNAwPoIgzDcscr_pAZIlr7LTAAg"

history_questions = {'–í –∫–∞–∫–æ–º –≥–æ–¥—É –ö–æ–ª—É–º–± –æ—Ç–∫—Ä—ã–ª –∞–º–µ—Ä–∏–∫—É?': '1492', '–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Ç–º–µ–Ω–∏–ª–∏ –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ?': '1861',
                     '–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ü–∞—Ä—å –†–∏–º–∞?': '–†–æ–º—É–ª'}


class Subject(Enum):
    NOTHING = 0
    HISTORY = 1


class Bot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(TOKEN)
        self.subject = Subject.NOTHING

    def start_message(self, message):
        self.bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}! –Ø –µ—â–µ –Ω–µ "
                                   f"–ø—Ä–∏–¥—É–º–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, "
                                   " \n–î–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!")

        time.sleep(1)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_history = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìö")
        markup.add(button_history)
        self.bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ª—é–±—É—é —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤', reply_markup=markup)


class Question:
    def __init__(self, bot):
        self.subject = Subject.NOTHING
        self.questions = list(history_questions.keys())
        self.current_question = random.randint(0, len(self.questions) - 1)
        self.start_time = None
        self.right_answer = False
        self.number_tips = 0

    def check_is_right_answer(self, message):
        if self.subject == Subject.HISTORY:
            answer = history_questions[self.questions[self.current_question]]
            if message.text == answer:
                my_bot.bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ")
                self.__update_question__()
                time.sleep(1)
                self.make_new_question(message)
                return True
            my_bot.bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return False

    def __update_question__(self):
        del history_questions[self.questions[self.current_question]]
        self.questions.pop(self.current_question)
        self.current_question = random.randint(0, len(self.questions) - 1)
        self.right_answer = False
        self.start_time = time.time()

    def make_new_question(self, message):
        if self.subject == Subject.HISTORY:
            my_bot.bot.send_message(message.chat.id, self.questions[self.current_question])
            self.start_time = time.time()

        self.start_making_tips(message)

    def __make_tip__(self, message):

        answer = history_questions[self.questions[self.current_question]]
        if self.number_tips == 0:
            my_bot.bot.send_message(message.chat.id, f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {'_ ' * len(answer)}")
        elif self.number_tips == 1:
            my_bot.bot.send_message(message.chat.id, f"–ü–æ–¥—Å–∫–∞–∑–∫–∞2: {'_ ' * len(answer)}")
        elif self.number_tips == 2:
            my_bot.bot.send_message(message.chat.id, f"–ü–æ–¥—Å–∫–∞–∑–∫–∞3: {'_ ' * len(answer)}")

    def start_making_tips(self, message):
        if self.subject == Subject.HISTORY:
            while True:
                if time.time() - self.start_time > 5:
                    if self.number_tips == 3:
                        my_bot.bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç')

                        self.__update_question__()
                        time.sleep(1)
                        self.number_tips = 0
                        self.make_new_question(message)
                        break

                    self.__make_tip__(message)
                    self.number_tips += 1
                    self.start_time = time.time()

                if self.right_answer:
                    self.right_answer = False
                    self.number_tips = 0
                    break


my_bot = Bot(TOKEN)
question = Question(my_bot)


@my_bot.bot.message_handler(commands=['start', 'stop'])
def handler(message):
    if message.text == '/start' and my_bot.subject == Subject.NOTHING:
        my_bot.start_message(message)
    elif message.text == '/stop':
        my_bot.bot.send_message(message.chat.id, '–Ø –≤–∞—Å –ø–æ–Ω—è–ª, —è –æ–±–∏–¥–µ–ª—Å—è, –Ω–µ –∂–¥–∏—Ç–µ –º–µ–Ω—è —Ç—É—Ç –±–æ–ª—å—à–µ')
        my_bot.bot.stop_polling()


@my_bot.bot.message_handler(content_types=['text'])
def run(message):
    if message.text == "–ò—Å—Ç–æ—Ä–∏—è üìö" and question.subject == Subject.NOTHING:
        question.subject = Subject.HISTORY
        question.make_new_question(message)

    else:
        question.check_is_right_answer(message)


def main():
    my_bot.bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
